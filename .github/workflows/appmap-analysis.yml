name: Analyze Maps from CircleCI

on:
  pull_request:


permissions:
  # AWS OIDC Related Permissions
  id-token: write # This is required for requesting the JWT
  # AppMap Specific Permissions
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  # Modify these environment variables to customize
  s3_role_name: arn:aws:iam::823624377950:role/GitHub_Read_Only_S3
  s3_session_name: GitHub_Read_Only_S3
  s3_region: us-west-2
  appmap_storage_bucket: circleci-appmaps

jobs:
  download_and_archive_base_revision:
    timeout-minutes: 30
    env:
      base_sha: ${{ github.event.pull_request.base.sha }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install AppMap tools
        uses: getappmap/install-action@v1
        with:
          install-appmap-library: false

      - name: Check for existing baseline archive
        id: check_for_baseline
        env:
          GITHUB_TOKEN: ${{ github.token }}
        continue-on-error: true  
        run: |
          appmap restore --check --revision ${base_sha} --github-repo ${GITHUB_REPOSITORY} --exact 
        
      - name: configure aws credentials
        if: steps.check_for_baseline.outcome == 'failure'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{env.s3_role_name}}
          role-session-name: ${{env.s3_session_name}}
          aws-region: ${{env.s3_region}}

      - name: Look for base revision AppMaps
        if: steps.check_for_baseline.outcome == 'failure'
        run: | 
          set +e
          while true; do 
            aws s3 ls s3://${appmap_storage_bucket}/${base_sha}.tar
            exit_status=$?
              if [ $exit_status -eq 0 ]; then
                echo "s3://${appmap_storage_bucket}/${base_sha}.tar exists, continuing..."
                break
              else
                echo "${base_sha}.tar does not exist. Waiting 10 seconds."
                sleep 10
              fi
          done
      - name: Download and extract appmaps
        if: steps.check_for_baseline.outcome == 'failure'
        run: | 
          aws s3 cp s3://${appmap_storage_bucket}/${base_sha}.tar ${base_sha}.tar 
          tar xvf ${base_sha}.tar
      - name: Archive AppMaps
        if: steps.check_for_baseline.outcome == 'failure'
        uses: getappmap/archive-action@v1
        with: 
          revision: ${base_sha}

  appmap-analysis:
    needs: [download_and_archive_base_revision]
    runs-on: ubuntu-latest
    env:
      head_sha: ${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Install AppMap tools
        uses: getappmap/install-action@v1
        with:
          directory: .
          install-appmap-library: false

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{env.s3_role_name}}
          role-session-name: ${{env.s3_session_name}}
          aws-region: ${{env.s3_region}}

      - name: Look for head revision AppMaps
        shell: bash
        run: | 
          set +e
          while true; do 
            aws s3 ls s3://${appmap_storage_bucket}/${head_sha}.tar
            exit_status=$?
              if [ $exit_status -eq 0 ]; then
                echo "s3://${appmap_storage_bucket}/${head_sha}.tar exists, continuing..."
                break
              else
                echo "${head_sha}.tar does not exist. Waiting 10 seconds."
                sleep 10
              fi
          done
      - name: Download and extract appmaps
        run: | 
          aws s3 cp s3://${appmap_storage_bucket}/${head_sha}.tar ${head_sha}.tar 
          tar xvf ${head_sha}.tar
    
      - name: Analyze AppMaps
        uses: getappmap/analyze-action@v1
        with:
          directory: .
          base-revision: ${{ github.event.pull_request.base.sha }}
          head-revision: ${{ github.event.pull_request.head.sha }}